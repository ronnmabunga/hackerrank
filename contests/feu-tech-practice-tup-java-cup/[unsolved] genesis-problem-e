#include <algorithm>
#include <cmath>
#include <cstdio>
#include <iostream>
#include <vector>

using namespace std;

void solve(int **board, int boxesLeft, int coordx, int coordy, int queens);

int maxs;
int N;
int main() {
  maxs = 0;
  cin >> N;
  int boxesLeft = N * N;
  int board[N][N];
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
      board[i][j] = 0;
    }
  }
  solve(board, boxesLeft, 0, 0, 0);
  cout << maxs;
}

void solve(int **b, int boxesLeft, int coordx, int coordy, int queens) {
  int board[][] = b;
  if (boxesLeft == 0) {
    if (maxs < queens) {
      maxs = queens;
    }
  }
  if (b[coordx][coordy] != 0) {
    if (coordx + 1 == N) {
      solve(b, boxesLeft, 0, coordy + 1, queens);
    } else {
      solve(b, boxesLeft, coordx + 1, coordy, queens);
    }
  } else {
    b[coordx][coordy] = 2;
    boxesLeft--;
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++) {
        if (i == coordx || j == coordy || (j - coordy) == i - coordx ||
            (j - coordy) == (coordx - i)) {
          if (b[i][j] == 0) {
            b[i][j] = 1;
            boxesLeft--;
          }
        }
      }
    }
    if (coordx + 1 == N) {
      solve(b, boxesLeft, 0, coordy + 1, queens + 1);
    } else {
      solve(b, boxesLeft, coordx + 1, coordy, queens + 1);
    }
  }
}